diff --git a/notebooks/Example-1.ipynb b/notebooks/Example-1.ipynb
index 0ef35a4..6118ee0 100644
--- a/notebooks/Example-1.ipynb
+++ b/notebooks/Example-1.ipynb
@@ -1,9 +1,1089 @@
 {
  "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "id": "ae510489-e60e-494e-ade6-470fc69977d0",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'lateral_spacing': 0.01, 'vertical_spacing': 0.01, 'max_offset': 5.0, 'max_depth': 1.0, 'rec_spacing': 10, 'sou_spacing': 10, 'num_epochs': 250, 'num_neurons': 20, 'num_layers': 10, 'learning_rate': 0.001, 'model_type': 'seam', 'data_type': 'full', 'middle_shot': 'n', 'until_cmb': 'n', 'earth_scale': 'n', 'scale_factor': 10, 'reduce_after': 15, 'seed': 123, 'initialization': 'varianceScaling', 'plotting_factor': 1, 'rescale_plot': 'n', 'depth_shift': 'n', 'tau_multiplier': 3.0, 'initial_velocity': 4, 'zid_source': 5, 'zid_receiver': 0, 'explode_reflector': 'n', 'field_synthetic': 'n', 'v_multiplier': 3, 'activation': 'elu', 'num_points': 1.0, 'irregular_grid': 'n', 'xid_well': 5, 'last_vmultiplier': 5, 'nu_units': 'unitless', 'well_depth': None, 'exp_function': 'n', 'exp_factor': 1.0, 'exclude_topo': 'n', 'exclude_well': 'n', 'exclude_source': 'n', 'loss_function': 'mse', 'station_factor': 1.0, 'event_factor': 1.0, 'checker_size': 5.0, 'tau_act': 'None', 'empty_middle': 'n', 'factorization_type': 'multiplicative', 'causality_factor': 1.0, 'causality_weight': 'type_0', 'residual_network': 'n', 'velocity_loss': 'n', 'regular_station': 'n', 'data_neurons': 16, 'data_layers': 8, 'append_shot': 'n'}\n"
+     ]
+    }
+   ],
+   "source": [
+    "import wandb\n",
+    "import matplotlib.pyplot as plt\n",
+    "import pandas as pd\n",
+    "import numpy as np\n",
+    "import os\n",
+    "\n",
+    "from argparse import ArgumentParser   \n",
+    "from hcpinnseikonal.utils import *\n",
+    "from hcpinnseikonal.plot import *\n",
+    "\n",
+    "if __name__ == \"__main__\":\n",
+    "    \n",
+    "#     wandb.init(project=\"GFATT_PINNs-11-pytorch-surface-inversion\")\n",
+    "#     wandb.run.log_code(\".\")\n",
+    "\n",
+    "    parser = ArgumentParser(description=\"Chekcerboard Test\")\n",
+    "\n",
+    "    parser.add_argument(\n",
+    "        \"--lateral_spacing\",\n",
+    "        type=float,\n",
+    "        default=0.01,\n",
+    "        help=\"Lateral sampling.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--vertical_spacing\",\n",
+    "        type=float,\n",
+    "        default=0.01,\n",
+    "        help=\"Vertical sampling.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--max_offset\",\n",
+    "        type=float,\n",
+    "        default=5.,\n",
+    "        help=\"Maximum offset.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--max_depth\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Maximum depth.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--rec_spacing\",\n",
+    "        type=int,\n",
+    "        default=10,\n",
+    "        help=\"Receiver sampling.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--sou_spacing\",\n",
+    "        type=int,\n",
+    "        default=10,\n",
+    "        help=\"Source sampling.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--num_epochs\",\n",
+    "        type=int,\n",
+    "        default=250,\n",
+    "        help=\"Epochs length.\",\n",
+    "    )    \n",
+    "    parser.add_argument(\n",
+    "        \"--num_neurons\",\n",
+    "        type=int,\n",
+    "        default=20,\n",
+    "        help=\"Neurons width.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--num_layers\",\n",
+    "        type=int,\n",
+    "        default=10,\n",
+    "        help=\"Layers depth.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--learning_rate\",\n",
+    "        type=float,\n",
+    "        default=1e-3,\n",
+    "        help=\"Learning rate.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--model_type\",\n",
+    "        type=str,\n",
+    "        default='seam',\n",
+    "        help=\"Type of velocity model used.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--data_type\",\n",
+    "        type=str,\n",
+    "        default='full',\n",
+    "        help=\"Type of data interpolation used.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--middle_shot\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the shots centered at the model (number of shot fixed) or spread accross.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--until_cmb\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the velocity reaches only down to the core-mantle boundary(CMB).\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--earth_scale\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the experiment mimics the actual Earth's coordinate values.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--scale_factor\",\n",
+    "        type=int,\n",
+    "        default=10,\n",
+    "        help=\"When the experiments are scaled this corresponds to the factor.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--reduce_after\",\n",
+    "        type=int,\n",
+    "        default=15,\n",
+    "        help=\"When the learning rate should be reduced after stagnancy.\",\n",
+    "    )    \n",
+    "    parser.add_argument(\n",
+    "        \"--seed\",\n",
+    "        type=int,\n",
+    "        default=123,\n",
+    "        help=\"Seed for reproducibility.\",\n",
+    "    ) \n",
+    "    parser.add_argument(\n",
+    "        \"--initialization\",\n",
+    "        type=str,\n",
+    "        default='varianceScaling',\n",
+    "        help=\"Seed for reproducibility.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--plotting_factor\",\n",
+    "        type=int,\n",
+    "        default=1,\n",
+    "        help=\"The multiplication of the coordinate values (default is 1 km x 5 km, vertically and laterally).\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--rescale_plot\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the plotting is scaled to mimic the Earth Crust experiment.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--depth_shift\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the plotting is shifted.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--tau_multiplier\",\n",
+    "        type=float,\n",
+    "        default=3.,\n",
+    "        help=\"Scaling factor for the last layer in the tau model.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--initial_velocity\",\n",
+    "        type=float,\n",
+    "        default=4,\n",
+    "        help=\"Starting velocity.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--zid_source\",\n",
+    "        type=int,\n",
+    "        default=5,\n",
+    "        help=\"Z index of the source location.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--zid_receiver\",\n",
+    "        type=int,\n",
+    "        default=0,\n",
+    "        help=\"Z index of the receiver location.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--explode_reflector\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Boolean whether to place the shots in the middle.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--field_synthetic\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Boolean to mimic the field earthquake South California data.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--v_multiplier\",\n",
+    "        type=float,\n",
+    "        default=3,\n",
+    "        help=\"Scaling factor for the last layer in the v model.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--activation\",\n",
+    "        type=str,\n",
+    "        default='elu',\n",
+    "        help=\"Type of activation function.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--num_points\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Fraction of the collocation points.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--irregular_grid\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Boolean to select random non-regular grid training points.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--xid_well\",\n",
+    "        type=int,\n",
+    "        default=5,\n",
+    "        help=\"Z index of the well location.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--last_vmultiplier\",\n",
+    "        type=int,\n",
+    "        default=5,\n",
+    "        help=\"Integer scalar for the output of the velocity network.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--nu_units\",\n",
+    "        type=str,\n",
+    "        default='unitless',\n",
+    "        help=\"Set whether the velocity network predicts a scalar (unitless) qantity or the velocity field directly.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--well_depth\",\n",
+    "        type=int,\n",
+    "        default=None,\n",
+    "        help=\"Depth index of the end point of the well.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--exp_function\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Imposing smoothness through exponential function.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--exp_factor\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Imposing smoothness through exponential function; its factor.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--exclude_topo\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the receiver stations locations are not a function of the topopgraphy.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--exclude_well\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Boolean whether to include the well location for training.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--exclude_source\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Boolean whether to include the source location for training.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--loss_function\",\n",
+    "        type=str,\n",
+    "        default='mse',\n",
+    "        help=\"Type of metric for the regression loss.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--station_factor\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Scale the real earthquake depth for semi-synhtetic experiments.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--event_factor\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Scale the real earthquake depth for semi-synhtetic experiments.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--checker_size\",\n",
+    "        type=float,\n",
+    "        default=5.,\n",
+    "        help=\"Scale the real earthquake depth for semi-synhtetic experiments.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--tau_act\",\n",
+    "        type=str,\n",
+    "        default='None',\n",
+    "        help=\"Last activation function for the tau model.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--empty_middle\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Imposing no recording nor shot in the middle part of the model.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--factorization_type\",\n",
+    "        type=str,\n",
+    "        default='multiplicative',\n",
+    "        help=\"Types of factorization used for the eikonal.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--causality_factor\",\n",
+    "        type=float,\n",
+    "        default=1.,\n",
+    "        help=\"Exponential coefficient from the original CausalPINNs paper.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--causality_weight\",\n",
+    "        type=str,\n",
+    "        default='type_0',\n",
+    "        help=\"Exponential coefficient from the original CausalPINNs paper.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--residual_network\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether a network with residual connections is used.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--velocity_loss\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the loss uses a velocity unit.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--regular_station\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether the station for the field is regularly sampled.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--data_neurons\",\n",
+    "        type=int,\n",
+    "        default=16,\n",
+    "        help=\"Neurons width.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--data_layers\",\n",
+    "        type=int,\n",
+    "        default=8,\n",
+    "        help=\"Layers depth.\",\n",
+    "    )\n",
+    "    parser.add_argument(\n",
+    "        \"--append_shot\",\n",
+    "        type=str,\n",
+    "        default='n',\n",
+    "        help=\"Whether we add virtual shot at the bottom right of the model.\",\n",
+    "    )\n",
+    "    args = parser.parse_args([])\n",
+    "    dict_args = vars(args)\n",
+    "    print(dict_args)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 27,
+   "id": "a2c6fc60-cac1-4243-a81e-da4d4d5f23d6",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'lateral_spacing': 0.03, 'vertical_spacing': 0.01, 'max_offset': 8.6, 'max_depth': 1, 'rec_spacing': 20, 'sou_spacing': 40, 'num_epochs': 3000, 'num_neurons': 24, 'num_layers': 12, 'learning_rate': 0.001, 'model_type': 'marmousi', 'data_type': 'nn', 'middle_shot': 'n', 'until_cmb': 'y', 'earth_scale': 'n', 'scale_factor': 2, 'reduce_after': 50, 'seed': 1234, 'initialization': 'varianceScaling', 'plotting_factor': 1, 'rescale_plot': 'y', 'depth_shift': 'n', 'tau_multiplier': 1, 'initial_velocity': 3, 'zid_source': 5, 'zid_receiver': 0, 'explode_reflector': 'n', 'field_synthetic': 'y', 'v_multiplier': 3, 'activation': 'elu', 'num_points': 1.0, 'irregular_grid': 'y', 'xid_well': 5, 'last_vmultiplier': 5, 'nu_units': 'unitless', 'well_depth': None, 'exp_function': 'n', 'exp_factor': 1.0, 'exclude_topo': 'n', 'exclude_well': 'n', 'exclude_source': 'n', 'loss_function': 'mse', 'station_factor': 0.1, 'event_factor': 0.9, 'checker_size': 5.0, 'tau_act': 'tanh', 'empty_middle': 'n', 'factorization_type': 'additive', 'causality_factor': 0.5, 'causality_weight': 'type_0', 'residual_network': 'y', 'velocity_loss': 'n', 'regular_station': 'y', 'data_neurons': 16, 'data_layers': 8, 'append_shot': 'n'}\n"
+     ]
+    }
+   ],
+   "source": [
+    "args.scale_factor=2 \n",
+    "args.until_cmb='y' \n",
+    "args.num_epochs=3000 \n",
+    "args.seed=1234 \n",
+    "args.learning_rate=1e-3 \n",
+    "args.rescale_plot='y' \n",
+    "args.initial_velocity=3 \n",
+    "args.zid_source=5 \n",
+    "args.zid_receiver=0 \n",
+    "args.data_type='nn' \n",
+    "args.irregular_grid='y' \n",
+    "args.num_layers=12 \n",
+    "args.model_type='marmousi' \n",
+    "args.v_multiplier=3 \n",
+    "args.factorization_type='additive' \n",
+    "args.tau_act='tanh' \n",
+    "args.tau_multiplier=1 \n",
+    "args.max_offset=8.6 \n",
+    "args.max_depth=1 \n",
+    "args.vertical_spacing=0.01 \n",
+    "args.lateral_spacing=0.03 \n",
+    "args.num_neurons=24 \n",
+    "args.causality_factor=.5 \n",
+    "\n",
+    "args.causality_weight='type_0' \n",
+    "args.reduce_after=50 \n",
+    "args.field_synthetic='y' \n",
+    "args.event_factor=0.9 \n",
+    "args.station_factor=0.1 \n",
+    "args.residual_network='y' \n",
+    "args.empty_middle='n' \n",
+    "args.regular_station='y' \n",
+    "args.rec_spacing=20 \n",
+    "args.sou_spacing=40\n",
+    "\n",
+    "dict_args = vars(args)\n",
+    "print(dict_args)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 28,
+   "id": "8a49dd75-33c0-4616-a997-72e405a3f7cd",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Cuda installed! Running on GPU!\n",
+      "Device: cuda:0 Quadro RTX 8000\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_23937/481285251.py:71: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  eve_only.loc[:, 'closest_event'] = np.copy(d[0].values)\n",
+      "/tmp/ipykernel_23937/481285251.py:79: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  sta_only.loc[:, 'closest_station'] = np.copy(d[0].values)\n",
+      "pygmt-session [WARNING]: Remote dataset given to a data processing module but no registration was specified - default to gridline registration (if available)\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "4.551132167026825 15 15 29 29\n"
+     ]
+    },
+    {
+     "ename": "NameError",
+     "evalue": "name 'xmin' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[28], line 236\u001b[0m\n\u001b[1;32m    233\u001b[0m velmodel \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrepeat(vel[\u001b[38;5;241m.\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;241m.\u001b[39m,np\u001b[38;5;241m.\u001b[39mnewaxis],sx\u001b[38;5;241m.\u001b[39msize,axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n\u001b[1;32m    235\u001b[0m \u001b[38;5;28mprint\u001b[39m(np\u001b[38;5;241m.\u001b[39mnanmax(velmodel), \u001b[38;5;28mlen\u001b[39m(id_rec_z), \u001b[38;5;28mlen\u001b[39m(id_rec_x), \u001b[38;5;28mlen\u001b[39m(id_sou_z), \u001b[38;5;28mlen\u001b[39m(id_sou_x))\n\u001b[0;32m--> 236\u001b[0m \u001b[43mplot_section\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvelmodel\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mv_true.png\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvmin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnanmin\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvelmodel\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[38;5;241;43m0.1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvmax\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnanmax\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvelmodel\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m0.5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msave_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwandb\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maspect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mequal\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    238\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m args\u001b[38;5;241m.\u001b[39mdepth_shift\u001b[38;5;241m==\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    239\u001b[0m     zmin, zmax, z, sz, Z, SZ \u001b[38;5;241m=\u001b[39m zmin\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m, zmax\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m, z\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m, sz\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m, Z\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m, SZ\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m5\u001b[39m\n",
+      "File \u001b[0;32m~/my_paper/eage2023_paper1/repo/HCPINNsEikonal-dev/src/hcpinnseikonal/plot.py:42\u001b[0m, in \u001b[0;36mplot_section\u001b[0;34m(data, fig_name, data_type, vmin, vmax, cmap, save_dir, aspect)\u001b[0m\n\u001b[1;32m     40\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure()\n\u001b[1;32m     41\u001b[0m ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39mgca()\n\u001b[0;32m---> 42\u001b[0m im \u001b[38;5;241m=\u001b[39m ax\u001b[38;5;241m.\u001b[39mimshow(data, extent\u001b[38;5;241m=\u001b[39m[\u001b[43mxmin\u001b[49m,xmax,zmax,zmin], cmap\u001b[38;5;241m=\u001b[39mcmap, \n\u001b[1;32m     43\u001b[0m                aspect\u001b[38;5;241m=\u001b[39maspect, vmin\u001b[38;5;241m=\u001b[39mvmin, vmax\u001b[38;5;241m=\u001b[39mvmax, interpolation\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkaiser\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     45\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m id_sou_z\u001b[38;5;241m.\u001b[39msize\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m     46\u001b[0m     plt\u001b[38;5;241m.\u001b[39mscatter(x[id_sou_x], z[id_sou_z], \u001b[38;5;241m5\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwhite\u001b[39m\u001b[38;5;124m'\u001b[39m, marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m*\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
+      "\u001b[0;31mNameError\u001b[0m: name 'xmin' is not defined"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "# Setup\n",
+    "wandb.config.update(args)\n",
+    "\n",
+    "seed = args.seed\n",
+    "\n",
+    "set_seed(seed)\n",
+    "device = set_device()\n",
+    "\n",
+    "# Medium\n",
+    "data_type = args.data_type\n",
+    "deltar = args.rec_spacing\n",
+    "deltas = args.sou_spacing\n",
+    "\n",
+    "# Computational model parameters\n",
+    "zmin = -0.1 if args.field_synthetic=='y' else 0; zmax = args.max_depth; deltaz = args.vertical_spacing;\n",
+    "xmin = 0.; xmax = args.max_offset; deltax = args.lateral_spacing;\n",
+    "\n",
+    "if args.earth_scale=='y':\n",
+    "    earth_radi = 6371/args.scale_factor # Average in km\n",
+    "    xmin, xmax, deltax = earth_radi*xmin, earth_radi*xmax, earth_radi*deltax\n",
+    "    zmin, zmax, deltaz = earth_radi*zmin, earth_radi*zmax, earth_radi*deltaz\n",
+    "\n",
+    "# Creating grid, extending the velocity model, and prepare list of grid points for training (X_star)\n",
+    "z = np.arange(zmin,zmax+deltaz,deltaz)\n",
+    "nz = z.size\n",
+    "\n",
+    "x = np.arange(xmin,xmax+deltax,deltax)\n",
+    "nx = x.size\n",
+    "\n",
+    "# Number of training points\n",
+    "num_tr_pts = 4000 #int(args.num_points * nz * nx)\n",
+    "\n",
+    "if args.field_synthetic=='y':\n",
+    "    import pandas as pd\n",
+    "    import pygmt\n",
+    "    import numpy as np\n",
+    "\n",
+    "    import pandas as pd\n",
+    "\n",
+    "    # Earthquake events location\n",
+    "    location = pd.read_csv('/home/taufikmh/KAUST/fall_2022/GFATT_PINNs/data/fang_etal_2020/sjfzcatlog.csv')\n",
+    "\n",
+    "    # Recorded traveltime data\n",
+    "    traveltime = pd.read_table('/home/taufikmh/KAUST/fall_2022/GFATT_PINNs/data/fang_etal_2020/sjfz_traveltime.dat', delim_whitespace='y')\n",
+    "\n",
+    "    # Rounding to make the coordinates rounding the same\n",
+    "    location, traveltime = location.round(3), traveltime.round(3)\n",
+    "\n",
+    "    # Merge\n",
+    "    data = pd.merge(traveltime, location,  how='left', left_on=['evlat','evlon','evdep'], right_on = ['evlat','evlon','evdep'])\n",
+    "\n",
+    "    # Create earthquake group\n",
+    "    data['event_id'] = data.groupby(['evlat', 'evlon', 'evdep']).cumcount() + 1\n",
+    "    data['station_id'] = data.groupby(['stlat', 'stlon', 'stele']).cumcount() + 1\n",
+    "\n",
+    "    # Station only\n",
+    "    sta_only = data.drop_duplicates(subset=['stlat', 'stlon'], keep='last')\n",
+    "\n",
+    "    # Event only\n",
+    "    eve_only = data.drop_duplicates(subset=['evlat', 'evlon'], keep='last')\n",
+    "\n",
+    "    region = [-118, -115, 32.5, 34.50]\n",
+    "    x0,x1,y0,y1 = -117.45, -115.55, 34.15, 32.76\n",
+    "\n",
+    "    # eve_only['dist_to_line'] = \n",
+    "    p1=np.array([(360+x0)*np.ones_like(eve_only.event_id.values), y0*np.ones_like(eve_only.event_id.values)])\n",
+    "    p2=np.array([(360+x1)*np.ones_like(eve_only.event_id.values), y1*np.ones_like(eve_only.event_id.values)])\n",
+    "    p3=np.array([eve_only.evlon, eve_only.evlat])\n",
+    "\n",
+    "    d = pd.DataFrame(np.cross((p2-p1).T,(p3-p1).T)/np.linalg.norm((p2-p1).T))\n",
+    "    eve_only.loc[:, 'closest_event'] = np.copy(d[0].values)\n",
+    "\n",
+    "    # sta_only['dist_to_line'] = \n",
+    "    p1=np.array([(360+x0)*np.ones_like(sta_only.station_id.values), y0*np.ones_like(sta_only.station_id.values)])\n",
+    "    p2=np.array([(360+x1)*np.ones_like(sta_only.station_id.values), y1*np.ones_like(sta_only.station_id.values)])\n",
+    "    p3=np.array([sta_only.stlon, sta_only.stlat])\n",
+    "\n",
+    "    d = pd.DataFrame(np.cross((p2-p1).T,(p3-p1).T)/np.linalg.norm((p2-p1).T))\n",
+    "    sta_only.loc[:, 'closest_station'] = np.copy(d[0].values)\n",
+    "\n",
+    "    closest_sta = sta_only[np.abs(sta_only['closest_station'])<0.003]\n",
+    "    closest_eve = eve_only[np.abs(eve_only['closest_event'])<0.00003]\n",
+    "\n",
+    "    grid = pygmt.datasets.load_earth_relief(resolution=\"03m\", region=region)\n",
+    "\n",
+    "    points = pd.DataFrame(\n",
+    "        data=np.linspace(start=(x0, y0), stop=(x1, y1), num=len(x)),\n",
+    "        columns=[\"x\", \"y\"],\n",
+    "    )\n",
+    "\n",
+    "    track = pygmt.grdtrack(points=points, grid=grid, newcolname=\"elevation\")\n",
+    "    xtop = track.x.values + 360\n",
+    "    ztop = track.elevation.values*1e-3\n",
+    "\n",
+    "    xsta = closest_sta.stlon.values\n",
+    "    zsta = closest_sta.stele.values\n",
+    "\n",
+    "    xeve = closest_eve.evlon.values\n",
+    "    zeve = closest_eve.evdep.values\n",
+    "\n",
+    "    xtop,xsta,xeve = xtop-xtop.min(),xsta-xsta.min(),xeve-xeve.min()\n",
+    "    xtop,xsta,xeve = xtop/xtop.max()*xmax,xsta/xsta.max()*xmax,xeve/xeve.max()*xmax\n",
+    "\n",
+    "    ztop,zsta,zeve = ztop-ztop.min(),zsta-zsta.min(),zeve-zeve.min()\n",
+    "    ztop,zsta,zeve = args.station_factor*ztop/ztop.max()+zmin,args.station_factor*zsta/zsta.max()+zmin,zmax-args.event_factor*zeve/zeve.max()\n",
+    "\n",
+    "    xsta,xeve,zsta,zeve = xsta[(xsta>xtop.min()) & (xsta<xtop.max())],xeve[(xeve>xtop.min()) & (xeve<xtop.max())],zsta[(xsta>xtop.min()) & (xsta<xtop.max())],zeve[(xeve>xtop.min()) & (xeve<xtop.max())]\n",
+    "\n",
+    "    if args.exclude_topo=='y':\n",
+    "        ztop, zsta = zmin*np.ones_like(ztop), zmin*np.ones_like(zsta)\n",
+    "\n",
+    "    ztop, zsta = zmin-ztop, zmin-zsta\n",
+    "\n",
+    "    id_sou_z = np.array([]).astype(int)\n",
+    "\n",
+    "    for szi in zeve.round(2):\n",
+    "        sid = np.where(np.abs(z.round(3)-szi)<1e-6)\n",
+    "        id_sou_z = np.append(id_sou_z,sid)\n",
+    "\n",
+    "    id_rec_z = np.array([]).astype(int)\n",
+    "\n",
+    "    for rzi in zsta.round(2):\n",
+    "        sid = np.where(np.abs(z.round(3)-rzi)<1e-6)\n",
+    "        id_rec_z = np.append(id_rec_z,sid)\n",
+    "\n",
+    "    id_sou_x = np.array([]).astype(int)\n",
+    "\n",
+    "    for sxi in xeve.round(2):\n",
+    "        sid = np.where(np.abs(x.round(3)-sxi)<1.5e-2)\n",
+    "        id_sou_x = np.append(id_sou_x,sid)\n",
+    "\n",
+    "    id_rec_x = np.array([]).astype(int)\n",
+    "\n",
+    "    for rxi in xsta.round(2):\n",
+    "        sid = np.where(np.abs(x.round(3)-rxi)<1.5e-2)\n",
+    "        id_rec_x = np.append(id_rec_x,sid)\n",
+    "\n",
+    "    id_top_x = []\n",
+    "    id_top_z = []\n",
+    "\n",
+    "    for h in range(len(xtop)):\n",
+    "\n",
+    "        for i in range(len(x)):\n",
+    "            if np.abs(xtop[h]-x[i])<1e-2:\n",
+    "                id_top_x.append(i)\n",
+    "\n",
+    "        for j in range(len(z)):    \n",
+    "            if np.abs(ztop[h]-z[j])<5e-3:\n",
+    "                id_top_z.append(j)\n",
+    "\n",
+    "    if args.regular_station=='y':\n",
+    "        id_rec_x = id_top_x[::args.rec_spacing]\n",
+    "        id_rec_z = id_top_z[::args.rec_spacing]\n",
+    "\n",
+    "    if args.append_shot=='y':\n",
+    "        for i in range(8):\n",
+    "            id_sou_x = np.append(id_sou_x, len(x)-1-2*i)\n",
+    "            id_sou_z = np.append(id_sou_z, len(z)-1-int(0.5*i))\n",
+    "            \n",
+    "    plt.plot(args.plotting_factor*(xtop-xtop.min()), args.plotting_factor*ztop)\n",
+    "    plt.scatter(args.plotting_factor*(xeve-xtop.min()), args.plotting_factor*zeve)\n",
+    "    plt.scatter(x[id_rec_x], z[id_rec_z], c='y', marker='v')\n",
+    "    plt.title('Cross-section')\n",
+    "    plt.xlabel('X (km)')\n",
+    "    plt.ylabel('Z (km)')\n",
+    "    plt.gca().invert_yaxis()\n",
+    "    plt.axis('tight')\n",
+    "    plt.savefig(os.path.join(wandb.run.dir, 'cross_section.png'), format='png', bbox_inches=\"tight\")\n",
+    "else:\n",
+    "    zeve, xeve = z[args.zid_source]*np.ones_like(x[id_sou_x]), x[id_sou_x]\n",
+    "    zsta, xsta = z[args.zid_receiver]*np.ones_like(x[id_rec_x]), x[id_rec_x]\n",
+    "    ztop, xtop = zmin*np.ones_like(x), np.copy(x)\n",
+    "\n",
+    "    id_sou_z = np.array([]).astype(int)\n",
+    "\n",
+    "    for szi in zeve.round(2):\n",
+    "        sid = np.where(np.abs(z.round(3)-szi)<1e-6)\n",
+    "        id_sou_z = np.append(id_sou_z,sid)\n",
+    "\n",
+    "    id_sou_x = np.array([]).astype(int)\n",
+    "\n",
+    "    for sxi in xeve.round(2):\n",
+    "        sid = np.where(np.abs(x.round(3)-sxi)<1e-6)\n",
+    "        id_sou_x = np.append(id_sou_x,sid)\n",
+    "\n",
+    "    id_rec_z = np.array([]).astype(int)\n",
+    "\n",
+    "    for szi in zsta.round(2):\n",
+    "        sid = np.where(np.abs(z.round(3)-szi)<1e-6)\n",
+    "        id_rec_z = np.append(id_rec_z,sid)\n",
+    "\n",
+    "    id_rec_x = np.array([]).astype(int)\n",
+    "\n",
+    "    for sxi in xsta.round(2):\n",
+    "        sid = np.where(np.abs(x.round(3)-sxi)<1e-6)\n",
+    "        id_rec_x = np.append(id_rec_x,sid)\n",
+    "\n",
+    "# Keeping the number of shots fixed while centering the shots location\n",
+    "if args.middle_shot=='y':\n",
+    "    id_sou_left = x.shape[0]//2-len(id_sou_x)//2\n",
+    "    id_sou_x = np.array(range(id_sou_left, id_sou_left+len(id_sou_x)))\n",
+    "\n",
+    "if args.explode_reflector=='y':\n",
+    "    id_sou_x = np.arange(0, len(x), args.sou_spacing)\n",
+    "    id_sou_z = np.ones_like(id_sou_x)*(len(z)-1)\n",
+    "\n",
+    "if args.empty_middle=='y':\n",
+    "    id_sou, id_rec = (np.array(id_sou_x)<=(len(x)//2-50))|(np.array(id_sou_x)>=(len(x)//2+50)), (np.array(id_rec_x)<=(len(x)//2-50))|(np.array(id_rec_x)>=(len(x)//2+50))\n",
+    "    if args.field_synthetic=='n':\n",
+    "        id_sou_x = np.array(id_sou_x)[id_sou]\n",
+    "        id_sou_z = np.array(id_sou_z)[id_sou]\n",
+    "    id_rec_x = np.array(id_rec_x)[id_rec]\n",
+    "    id_rec_z = np.array(id_rec_z)[id_rec]\n",
+    "\n",
+    "sz = z[id_sou_z]\n",
+    "sx = x[id_sou_x]\n",
+    "\n",
+    "Z,X,SX = np.meshgrid(z,x,sx,indexing='ij')\n",
+    "\n",
+    "SZ = np.ones(SX.shape)*sz # Creating an array of sources along z with same size as SX\n",
+    "\n",
+    "\n",
+    "vel = np.fromfile('../data/marmousi.bin', np.float32).reshape(221, 601)\n",
+    "x1 = np.linspace(0, 5, 601)\n",
+    "z1 = np.linspace(0, 1, 221) \n",
+    "from scipy import interpolate\n",
+    "x2 = np.linspace(0.25, 5, len(x))\n",
+    "z2 = np.linspace(0.09, 0.55, len(z)) \n",
+    "f = interpolate.interp2d(x1, z1, vel, kind='cubic')\n",
+    "vel = f(x2, z2)\n",
+    "\n",
+    "# Extending the velocity model in thirs dimension byy repeatin the array\n",
+    "velmodel = np.repeat(vel[...,np.newaxis],sx.size,axis=2)\n",
+    "\n",
+    "print(np.nanmax(velmodel), len(id_rec_z), len(id_rec_x), len(id_sou_z), len(id_sou_x))\n",
+    "plot_section(velmodel[:,:,0], 'v_true.png', vmin=np.nanmin(velmodel)+0.1, vmax=np.nanmax(velmodel)-0.5, save_dir=wandb.run.dir, aspect='equal')\n",
+    "\n",
+    "if args.depth_shift=='y':\n",
+    "    zmin, zmax, z, sz, Z, SZ = zmin+5, zmax+5, z+5, sz+5, Z+5, SZ+5\n",
+    "\n",
+    "X_star = [Z.reshape(-1,1), X.reshape(-1,1), SX.reshape(-1,1)] # Grid points for prediction \n",
+    "\n",
+    "# Numerical traveltime\n",
+    "T_data = numerical_traveltime()\n",
+    "\n",
+    "# Plots\n",
+    "if args.model_type=='checkerboard':\n",
+    "    plot_section((6 + 6.5217391304347826*Z[:,:,0])/args.scale_factor, \"v_back.png\", save_dir=wandb.run.dir)\n",
+    "    plot_section(velpert[:,:,0]/args.scale_factor, \"v_pert.png\", save_dir=wandb.run.dir)\n",
+    "\n",
+    "# Interpolation\n",
+    "\n",
+    "Td_nn = np.zeros_like(T_data)\n",
+    "taudx_nn = np.zeros_like(T_data)\n",
+    "\n",
+    "Ti_data = np.zeros((len(x[id_rec_x])*len(id_sou_x)))\n",
+    "xri = np.tile(x[id_rec_x], len(id_sou_x))\n",
+    "zri = np.tile(z[id_rec_z], len(id_sou_z))\n",
+    "xsi = np.repeat(x[id_sou_x], len(id_rec_x))\n",
+    "zsi = np.repeat(z[id_sou_z], len(id_rec_z))\n",
+    "\n",
+    "for i in range(len(id_sou_x)):\n",
+    "    Ti_data[i*len(x[id_rec_x]):(i+1)*len(x[id_rec_x])] = T_data[id_rec_z,id_rec_x,i]\n",
+    "\n",
+    "rand_idx = np.random.permutation(np.arange(len(Ti_data)))\n",
+    "\n",
+    "X_ori = np.vstack((xri, zri, xsi, zsi)).T\n",
+    "y_ori = Ti_data\n",
+    "\n",
+    "X_all = X_ori[rand_idx,:]\n",
+    "y_all = y_ori[rand_idx]\n",
+    "\n",
+    "X_all = torch.from_numpy(X_all).float()\n",
+    "y_all = torch.from_numpy(y_all).float()\n",
+    "\n",
+    "X_ori = torch.from_numpy(X_ori).float()\n",
+    "\n",
+    "all_dataset = torch.utils.data.TensorDataset(X_all, y_all)\n",
+    "\n",
+    "# Use Pytorch's functionality to load data in batches. Here we use full-batch training again.\n",
+    "all_loader = torch.utils.data.DataLoader(all_dataset, batch_size=16, shuffle=True)\n",
+    "\n",
+    "if data_type=='nn':\n",
+    "    torch.manual_seed(8888)\n",
+    "    model = FullyConnectedNetwork(4, 1, n_hidden=[args.data_neurons]*args.data_layers, act='elu')\n",
+    "    # optimizer = torch.optim.Adam(model.parameters(), lr=5e-4) # best\n",
+    "    optimizer = torch.optim.Adam(model.parameters(), lr=2e-3)\n",
+    "    # scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=int(5*args.reduce_after), verbose=True)\n",
+    "    scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=int(4*args.reduce_after), verbose=True)\n",
+    "    criterion = torch.nn.MSELoss()\n",
+    "    model.train()\n",
+    "    loss_data = []\n",
+    "    for epoch in range(int(5e3)):\n",
+    "        total_loss = 0.\n",
+    "        model.train()\n",
+    "        loss = 0\n",
+    "        for x_i, y_i in all_loader:\n",
+    "            optimizer.zero_grad()\n",
+    "            yest = model(x_i).view(-1)\n",
+    "            loss = criterion(yest, y_i)\n",
+    "            loss.backward()\n",
+    "            optimizer.step()\n",
+    "            total_loss += loss.item()\n",
+    "        if epoch % 50 == 0 and epoch > 0:\n",
+    "            print(f'Epoch: {epoch}, Loss: {total_loss / X_all[:,0].detach().numpy().size}')\n",
+    "        mean_loss = total_loss / X_all[:,0].detach().numpy().size\n",
+    "        wandb.log({\"data_loss\": mean_loss})\n",
+    "        scheduler.step(mean_loss)\n",
+    "        loss_data.append(mean_loss)\n",
+    "\n",
+    "    Td_nn = np.zeros_like(T_data)\n",
+    "    X_all = [np.tile(x[id_top_x], len(sx)), np.tile(z[id_top_z], len(sz)), \n",
+    "             np.repeat(x[id_sou_x], len(x[id_top_x])), np.repeat(z[id_sou_z], len(z[id_top_z]))]\n",
+    "\n",
+    "    model.eval()\n",
+    "    Td_pred = model(torch.FloatTensor(X_all).T)\n",
+    "\n",
+    "    for i in range(len(id_sou_x)):\n",
+    "        Td_nn[:,:,i] = Td_pred[i*len(x):(i+1)*len(x)].detach().numpy().reshape(-1)\n",
+    "\n",
+    "    # Convergence history plot for verification\n",
+    "    fig = plt.figure()\n",
+    "    ax = plt.axes()\n",
+    "    ax.semilogy(loss_data)\n",
+    "\n",
+    "    ax.set_xlabel('Epochs',fontsize=14)\n",
+    "\n",
+    "    plt.xticks(fontsize=11)\n",
+    "\n",
+    "    ax.set_ylabel('Loss',fontsize=14)\n",
+    "    plt.yticks(fontsize=11);\n",
+    "    plt.grid()\n",
+    "    plt.savefig(os.path.join(wandb.run.dir, \"data_loss.png\"), format='png', bbox_inches=\"tight\")\n",
+    "\n",
+    "    # Save model\n",
+    "    torch.save({\n",
+    "            'model_state_dict': model.state_dict(),\n",
+    "            'optimizer_state_dict': optimizer.state_dict(),\n",
+    "            'loss': loss_data\n",
+    "    }, wandb.run.dir+'/saved_data_model')\n",
+    "\n",
+    "# Analytical solution for the known traveltime part\n",
+    "if args.depth_shift=='y':\n",
+    "    vs = args.initial_velocity #velmodel[np.round((SZ-5)/deltaz).astype(int),np.round(SX/deltax).astype(int),0]\n",
+    "else:\n",
+    "    vs = velmodel[np.round(SZ/deltaz).astype(int),np.round(SX/deltax).astype(int),0]\n",
+    "\n",
+    "T0 = np.sqrt((Z-SZ)**2 + (X-SX)**2)/vs;\n",
+    "px0 = np.divide(X-SX, T0*vs**2, out=np.zeros_like(T0), where=T0!=0)\n",
+    "pz0 = np.divide(Z-SZ, T0*vs**2, out=np.zeros_like(T0), where=T0!=0)\n",
+    "\n",
+    "if args.field_synthetic=='y':\n",
+    "    xf = np.arange(xmin,xmax+0.1*deltax,0.1*deltax)\n",
+    "    zf = np.arange(zmin,zmax+0.1*deltaz,0.1*deltaz)\n",
+    "    T_topo = np.zeros((len(zf), len(xf), len(id_sou_x)))\n",
+    "    for i in range(len(id_sou_x)):\n",
+    "        f = interpolate.interp2d(x, z, T_data[:,:,i], kind='cubic')\n",
+    "        T_topo[:,:,i] = f(xf, zf)\n",
+    "    id_top_x = []\n",
+    "    id_top_z = []\n",
+    "\n",
+    "    for h in range(len(xtop)):\n",
+    "\n",
+    "        for i in range(len(x)):\n",
+    "            if np.abs(xtop[h]-x[i])<1e-2:\n",
+    "                id_top_x.append(i)\n",
+    "\n",
+    "        for j in range(len(z)):    \n",
+    "            if np.abs(ztop[h]-z[j])<5e-3:\n",
+    "                id_top_z.append(j)\n",
+    "\n",
+    "    taud_topo = np.divide(T_data, T0, where=T0!=0)[id_top_z, id_top_x, :]\n",
+    "    T_topo = T_data[id_top_z, id_top_x, :]\n",
+    "\n",
+    "    taud_topo = np.repeat(taud_topo, nz).reshape(nx,len(id_sou_x),nz).swapaxes(1,2).swapaxes(0,1)\n",
+    "    T_topo = np.repeat(T_topo, nz).reshape(nx,len(id_sou_x),nz).swapaxes(1,2).swapaxes(0,1)\n",
+    "\n",
+    "Td_hc = np.zeros_like(T0)\n",
+    "T0_hc = np.zeros_like(T0)\n",
+    "taud_hc = np.zeros_like(T0)\n",
+    "taudx_hc = np.zeros_like(T0)\n",
+    "\n",
+    "for i in range(len(id_sou_x)):\n",
+    "    T0_hc[:,:,i] = np.tile(T0[0,:,i], nz).reshape(nz,nx)\n",
+    "\n",
+    "    # Numerical\n",
+    "    if data_type=='full':\n",
+    "        Td_hc[:,:,i] = np.tile(T_data[0,:,i], nz).reshape(nz,nx)\n",
+    "\n",
+    "    # NN-based interpolation\n",
+    "    elif data_type=='nn':\n",
+    "        Td_hc[:,:,i] = Td_nn[:,:,i].reshape(nz,nx)\n",
+    "\n",
+    "    if args.factorization_type=='multiplicative':   \n",
+    "        taud_hc[:,:,i] = np.divide(Td_hc[:,:,i], T0_hc[:,:,i], out=np.ones_like(T0_hc[:,:,i]), where=T0_hc[:,:,i]!=0)\n",
+    "    else:\n",
+    "        taud_hc[:,:,i] = Td_hc[:,:,i] - T0_hc[:,:,i]\n",
+    "\n",
+    "    # Numerical\n",
+    "    if data_type=='full':\n",
+    "        taudx_hc[:,:,i] = np.gradient(taud_hc.reshape(nz,nx,len(id_sou_x))[:,:,i], deltax, axis=1)\n",
+    "\n",
+    "    # NN-based interpolation\n",
+    "    elif data_type=='nn':\n",
+    "        taudx_hc[:,:,i] = np.gradient(taud_hc.reshape(nz,nx,len(id_sou_x))[:,:,i], deltax, axis=1)\n",
+    "\n",
+    "if args.field_synthetic=='y':\n",
+    "\n",
+    "    NAN = np.ones_like(X)\n",
+    "    for i in range(z.shape[0]):\n",
+    "        for j in range(x.shape[0]):\n",
+    "            if z[i] < Z[id_top_z, id_top_x, 0][j]:\n",
+    "                NAN[i,j,:] = float(\"Nan\")\n",
+    "                \n",
+    "# Interpolation check            \n",
+    "plot_int = len(id_sou_x)//5 if len(id_sou_x)>=5 else 1\n",
+    "for i in range(0, len(id_sou_x), plot_int):\n",
+    "    plot_section(T_data.reshape(nz,nx,len(id_sou_x))[:,:,i], 't_data_sou_'+str(i)+'_.png', 's', save_dir=wandb.run.dir, aspect='equal')\n",
+    "\n",
+    "    plt.figure()\n",
+    "    plt.scatter(x[id_rec_x], T_data[id_rec_z,id_rec_x,i], label='Data')\n",
+    "    plt.scatter(x[id_rec_x], Td_hc[id_rec_z,id_rec_x,i], label='Interpolated')\n",
+    "    plt.legend(['Data', 'Interpolation'])\n",
+    "    plt.savefig(os.path.join(wandb.run.dir, \"interpolation.png\"), format='png', bbox_inches=\"tight\")\n",
+    "\n",
+    "# locate source boolean\n",
+    "import time\n",
+    "start_time = time.time()\n",
+    "\n",
+    "TOLX = 1e-9\n",
+    "TOLZ = 1e-9\n",
+    "\n",
+    "sids = np.array([]).astype(int)\n",
+    "\n",
+    "for i in range(len(sx)):\n",
+    "    sid = np.where(((np.abs(Z.ravel()-sz[i])<TOLZ) & (np.abs(X.ravel()-sx[i])<TOLX) & (np.abs(SZ.ravel()-sz[i])<TOLZ) & (np.abs(SX.ravel()-sx[i])<TOLX))==True)[0]\n",
+    "    sids = np.append(sids,sid)    \n",
+    "\n",
+    "# locate source boolean\n",
+    "isource = np.ones_like(X_star[0]).reshape(-1,).astype(bool)\n",
+    "isource[sids] = False\n",
+    "\n",
+    "velmodel = velmodel.reshape(-1,1)\n",
+    "px0 = px0.reshape(-1,1)\n",
+    "pz0 = pz0.reshape(-1,1)\n",
+    "T0 = T0.reshape(-1,1)\n",
+    "T_data = T_data.reshape(-1,1)\n",
+    "\n",
+    "taud = taud_hc.reshape(-1,1)\n",
+    "if args.factorization_type=='multiplicative':\n",
+    "    taud[~isource] = 1.    \n",
+    "taudx = taudx_hc.reshape(-1,1)\n",
+    "index = torch.arange(T0.size)\n",
+    "\n",
+    "perm_id = np.random.permutation(X.size-sx.size)\n",
+    "\n",
+    "# xz, s, taud, taud_dz, t0, t0_dx, t0_dz in data_loader:\n",
+    "\n",
+    "input_wsrc = [X, Z, SX, taud, taudx, T0, px0, pz0, index]\n",
+    "input_wosrc = [i.ravel()[isource.reshape(-1)][perm_id] for i in input_wsrc]\n",
+    "if args.field_synthetic=='y':\n",
+    "    input_wonan = [i.ravel()[~np.isnan(NAN.ravel()[isource.reshape(-1)][perm_id])] for i in input_wosrc]\n",
+    "\n",
+    "# network\n",
+    "lay = 'linear'\n",
+    "ini = args.initialization\n",
+    "bias = 2\n",
+    "mean = 2\n",
+    "std = 1\n",
+    "opttype = 'adam'\n",
+    "lr = args.learning_rate\n",
+    "\n",
+    "# SciANN uses variance_scaling normal or Glorot (Xavier) normal for the weight initialization\n",
+    "# SciANN uses uniform for the bias initialization\n",
+    "\n",
+    "torch.manual_seed(seed)\n",
+    "if args.residual_network=='n':\n",
+    "    tau_model = FullyConnectedNetwork(3, 1, [args.num_neurons]*args.num_layers, last_act=args.tau_act, act=args.activation, lay=lay, last_multiplier=args.tau_multiplier)\n",
+    "else:\n",
+    "    tau_model = ResidualNetwork(3, 1, num_neurons=args.num_neurons, num_layers=args.num_layers, act=args.activation, lay=lay, last_multiplier=args.tau_multiplier)\n",
+    "tau_model.to(device)\n",
+    "\n",
+    "torch.manual_seed(seed)\n",
+    "if args.residual_network=='n':\n",
+    "    v_model = FullyConnectedNetwork(2, 1, [args.num_neurons//2]*args.num_layers, act=args.activation, lay=lay, last_act='relu', last_multiplier=args.v_multiplier)\n",
+    "else:\n",
+    "    v_model = ResidualNetwork(2, 1, num_neurons=args.num_neurons//2, act='relu', last_act='relu', num_layers=args.num_layers, lay=lay, last_multiplier=args.v_multiplier)\n",
+    "v_model.to(device)\n",
+    "v_model.apply(lambda m: init_weights(m, init_type=ini, bias=bias, mean=mean, std=std))\n",
+    "\n",
+    "# wandb.watch(tau_model, log_freq=100)\n",
+    "# wandb.watch(v_model, log_freq=100)\n",
+    "\n",
+    "perc = args.num_points\n",
+    "\n",
+    "if args.irregular_grid=='y':\n",
+    "    npoints = int(X.size * perc)\n",
+    "    ipermute = np.random.permutation(np.arange(X.size))[:npoints]\n",
+    "else:\n",
+    "    ipermute = None\n",
+    "\n",
+    "# Compute traveltime with randomly initialized network\n",
+    "pde_loader, ic = create_dataloader([i.ravel() for i in input_wsrc], sx, np.ones_like(sx)*sz.reshape(-1,),\n",
+    "                                   shuffle=False, fast_loader=True, perm_id=ipermute)\n",
+    "\n",
+    "if args.exp_function=='y':\n",
+    "    rec_op = (1-np.exp((Z.reshape(nz,nx,len(id_sou_x))-z[args.zid_receiver])**args.exp_factor))\n",
+    "else:\n",
+    "    rec_op = Z.reshape(nz,nx,len(id_sou_x))\n",
+    "\n",
+    "\n",
+    "if args.factorization_type=='multiplicative':\n",
+    "    tau_true = np.divide(\n",
+    "        T_data.reshape(nz,nx,len(id_sou_x)), \n",
+    "        T0.reshape(nz,nx,len(id_sou_x)), \n",
+    "        out=np.ones_like(T0.reshape(nz,nx,len(id_sou_x))), \n",
+    "        where=T0.reshape(nz,nx,len(id_sou_x))!=0\n",
+    "    )\n",
+    "    tau_true = tau_true - taud.reshape(nz,nx,len(id_sou_x))\n",
+    "    tau_true = np.divide(\n",
+    "        tau_true, \n",
+    "        rec_op, \n",
+    "        out=np.ones_like(Z.reshape(nz,nx,len(id_sou_x))), \n",
+    "        where=Z.reshape(nz,nx,len(id_sou_x))!=0\n",
+    "    )\n",
+    "    T_true = (rec_op*tau_true + taud.reshape(nz,nx,len(id_sou_x)))*T0.reshape(nz,nx,len(id_sou_x))\n",
+    "else:\n",
+    "    tau_true = T_data.reshape(nz,nx,len(id_sou_x)) - T0.reshape(nz,nx,len(id_sou_x)) - taud.reshape(nz,nx,len(id_sou_x))\n",
+    "    tau_true = np.divide(\n",
+    "        tau_true, \n",
+    "        rec_op, \n",
+    "        out=np.ones_like(Z.reshape(nz,nx,len(id_sou_x))), \n",
+    "        where=Z.reshape(nz,nx,len(id_sou_x))!=0\n",
+    "    )\n",
+    "    T_true = rec_op*tau_true + taud.reshape(nz,nx,len(id_sou_x)) + T0.reshape(nz,nx,len(id_sou_x))\n",
+    "\n",
+    "\n",
+    "v_init = evaluate_velocity(v_model, pde_loader)\n",
+    "tau_init = evaluate_tau(tau_model, pde_loader)\n",
+    "\n",
+    "elapsed = time.time() - start_time\n",
+    "print('Loading time: %.2f minutes' %(elapsed/60.))\n",
+    "\n",
+    "# Optimizer\n",
+    "if opttype == 'adam':\n",
+    "    optimizer = torch.optim.Adam(list(tau_model.parameters()) + list(v_model.parameters()), lr=lr, betas=(0.9, 0.999), eps=1e-5)\n",
+    "elif opttype == 'lbfgs':\n",
+    "    optimizer = torch.optim.LBFGS(list(tau_model.parameters()) + list(v_model.parameters()), line_search_fn=\"strong_wolfe\")\n",
+    "\n",
+    "# Scheduler\n",
+    "scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=args.reduce_after, verbose=True)\n",
+    "\n",
+    "plot_section(torch_to_numpy(v_init, nx, nz, len(id_sou_x))[:,:,0], \"v_init.png\", aspect='equal')\n",
+    "\n",
+    "for i in range(0, len(id_sou_x), plot_int):\n",
+    "    plot_section(torch_to_numpy(tau_init.reshape(Z.shape)[:,:,i], nx, nz, -1), \"tau_init_\"+str(i)+\".png\", 's/km', save_dir=wandb.run.dir, aspect='equal')\n",
+    "    plot_section(tau_true[:,:,i], \"tau_true_\"+str(i)+\".png\", 's/km', save_dir=wandb.run.dir, aspect='equal')\n",
+    "    plot_section(T_true[:,:,i], \"T_true_\"+str(i)+\".png\", 's', save_dir=wandb.run.dir, aspect='equal')\n",
+    "    plot_section(T_data.reshape(nz,nx,-1)[:,:,i], \"T_data_\"+str(i)+\".png\", 's', save_dir=wandb.run.dir, aspect='equal')    \n",
+    "\n",
+    "if data_type!='full':\n",
+    "    if args.field_synthetic=='y':\n",
+    "        for i in range(0, len(id_sou_x), plot_int):\n",
+    "            plot_horizontal(T_data.reshape(X.shape)[id_top_z,id_top_x,i], Td_nn[id_top_z,id_top_x,i], x*args.plotting_factor,'Interpolation Comparison','T (s)','T_comp_'+str(i)+'.png','True','NN', save_dir=wandb.run.dir)\n",
+    "            plot_horizontal(smooth(np.gradient(T_data.reshape(X.shape)[id_top_z,id_top_x,i]),2,'blackman'), np.gradient(Td_nn[id_top_z,id_top_x,i]), x*args.plotting_factor,'Interpolation Comparison','dT/dx (s/km)','Tdx_comp_'+str(i)+'.png','True','NN', save_dir=wandb.run.dir)\n",
+    "    else:\n",
+    "        for i in range(0, len(id_sou_x), plot_int):\n",
+    "            plot_horizontal(T_data.reshape(X.shape)[0,:,i], Td_nn[0,:,i], x*args.plotting_factor,'Interpolation Comparison','T (s)','T_comp_'+str(i)+'.png','True','NN', save_dir=wandb.run.dir)\n",
+    "            plot_horizontal(smooth(np.gradient(T_data.reshape(X.shape)[0,:,i]),2,'blackman'), np.gradient(Td_nn[0,:,i]), x*args.plotting_factor,'Interpolation Comparison','dT/dx (s/km)','Tdx_comp_'+str(i)+'.png','True','NN', save_dir=wandb.run.dir)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7a2c9f90-0fae-478b-bfde-947299ad8e8d",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "d1db5870-edb7-4a9a-a723-caa0d132698f",
+   "id": "7076fd5b-dc27-4ba7-a100-6ea42500e395",
    "metadata": {},
    "outputs": [],
    "source": []
diff --git a/src/hcpinnseikonal/plot.py b/src/hcpinnseikonal/plot.py
index b2c1e8f..dc489bb 100644
--- a/src/hcpinnseikonal/plot.py
+++ b/src/hcpinnseikonal/plot.py
@@ -36,7 +36,8 @@ def plot_contour(pred, true, init, idx, fig_name=None, save_dir='./'):
                     format='png', bbox_inches="tight") 
 
 def plot_section(data, fig_name, data_type='km/s', vmin=None, vmax=None, 
-                 cmap='terrain', save_dir='./', aspect='equal'):
+                 cmap='terrain', save_dir='./', aspect='equal', 
+                 xmin=0, xmax=1, zmin=0, zmax=1):
     plt.figure()
     ax = plt.gca()
     im = ax.imshow(data, extent=[xmin,xmax,zmax,zmin], cmap=cmap, 
diff --git a/src/hcpinnseikonal/train.py b/src/hcpinnseikonal/train.py
index 16f2a22..4c97d9b 100644
--- a/src/hcpinnseikonal/train.py
+++ b/src/hcpinnseikonal/train.py
@@ -18,8 +18,7 @@ plt.rcParams['savefig.dpi'] = 300
 plt.rcParams['xtick.bottom'] = plt.rcParams['xtick.labelbottom'] = False
 plt.rcParams['xtick.top'] = plt.rcParams['xtick.labeltop'] = True
 plt.rcParams['figure.figsize'] =  [6.4, 4.8]
-        
-from argparse import ArgumentParser        
+           
 def numerical_traveltime():
     
     import pykonal
